"""
–¢–µ—Å—Ç–æ–≤—ã–π —Å–∫—Ä–∏–ø—Ç –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏ –∏–Ω—Ç–µ–≥—Ä–∞—Ü–∏–∏ —Å –°–ö–£–î —Å–∏—Å—Ç–µ–º–æ–π
"""

import requests
import json
import time
from datetime import datetime, timedelta
import random

# –ù–∞—Å—Ç—Ä–æ–π–∫–∏ —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è
SERVER_URL = "http://localhost:8000"
API_BASE = f"{SERVER_URL}/api/skud"

# –¢–µ—Å—Ç–æ–≤—ã–µ –¥–∞–Ω–Ω—ã–µ
TEST_EMPLOYEES = [
    {"employee_id": "EMP001", "name": "–ò–≤–∞–Ω–æ–≤ –ò–≤–∞–Ω –ò–≤–∞–Ω–æ–≤–∏—á"},
    {"employee_id": "EMP002", "name": "–ü–µ—Ç—Ä–æ–≤ –ü–µ—Ç—Ä –ü–µ—Ç—Ä–æ–≤–∏—á"},
    {"employee_id": "EMP003", "name": "–°–∏–¥–æ—Ä–æ–≤ –°–∏–¥–æ—Ä –°–∏–¥–æ—Ä–æ–≤–∏—á"},
    {"employee_id": "EMP004", "name": "–ö–æ–∑–ª–æ–≤–∞ –ê–Ω–Ω–∞ –°–µ—Ä–≥–µ–µ–≤–Ω–∞"},
    {"employee_id": "EMP005", "name": "–°–º–∏—Ä–Ω–æ–≤–∞ –ï–ª–µ–Ω–∞ –í–ª–∞–¥–∏–º–∏—Ä–æ–≤–Ω–∞"},
]

TEST_DEVICES = [
    {"ip": "192.168.1.100", "name": "–¢—É—Ä–Ω–∏–∫–µ—Ç –≥–ª–∞–≤–Ω—ã–π –≤—Ö–æ–¥", "serial": "SKUD001"},
    {"ip": "192.168.1.101", "name": "–°—á–∏—Ç—ã–≤–∞—Ç–µ–ª—å –æ—Ñ–∏—Å", "serial": "SKUD002"},
    {"ip": "192.168.1.102", "name": "–ö–æ–Ω—Ç—Ä–æ–ª–ª–µ—Ä —Å–∫–ª–∞–¥", "serial": "SKUD003"},
]


def test_server_connection():
    """–¢–µ—Å—Ç —Å–æ–µ–¥–∏–Ω–µ–Ω–∏—è —Å —Å–µ—Ä–≤–µ—Ä–æ–º"""
    print("üîç –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ —Å–æ–µ–¥–∏–Ω–µ–Ω–∏—è —Å —Å–µ—Ä–≤–µ—Ä–æ–º...")
    
    try:
        response = requests.get(f"{API_BASE}/test/", timeout=5)
        if response.status_code == 200:
            data = response.json()
            print(f"‚úÖ –°–µ—Ä–≤–µ—Ä –¥–æ—Å—Ç—É–ø–µ–Ω: {data['message']}")
            print(f"   –í—Ä–µ–º—è —Å–µ—Ä–≤–µ—Ä–∞: {data['server_time']}")
            return True
        else:
            print(f"‚ùå –û—à–∏–±–∫–∞ —Å–µ—Ä–≤–µ—Ä–∞: {response.status_code}")
            return False
    except requests.exceptions.RequestException as e:
        print(f"‚ùå –û—à–∏–±–∫–∞ —Å–æ–µ–¥–∏–Ω–µ–Ω–∏—è: {e}")
        return False


def test_health_check():
    """–¢–µ—Å—Ç –ø—Ä–æ–≤–µ—Ä–∫–∏ –∑–¥–æ—Ä–æ–≤—å—è —Å–∏—Å—Ç–µ–º—ã"""
    print("\nüè• –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –ø—Ä–æ–≤–µ—Ä–∫–∏ –∑–¥–æ—Ä–æ–≤—å—è —Å–∏—Å—Ç–µ–º—ã...")
    
    try:
        response = requests.get(f"{API_BASE}/health/")
        if response.status_code == 200:
            data = response.json()
            health = data['health']
            print(f"‚úÖ –û–±—â–∏–π —Å—Ç–∞—Ç—É—Å: {health['overall_status']}")
            print(f"   –£—Å—Ç—Ä–æ–π—Å—Ç–≤ –≤—Å–µ–≥–æ: {health['total_devices']}")
            print(f"   –£—Å—Ç—Ä–æ–π—Å—Ç–≤ –æ–Ω–ª–∞–π–Ω: {health['online_devices']}")
            print(f"   –ù–µ–æ–±—Ä–∞–±–æ—Ç–∞–Ω–Ω—ã—Ö —Å–æ–±—ã—Ç–∏–π: {health['unprocessed_events']}")
            return True
        else:
            print(f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–æ–≤–µ—Ä–∫–∏ –∑–¥–æ—Ä–æ–≤—å—è: {response.status_code}")
            return False
    except requests.exceptions.RequestException as e:
        print(f"‚ùå –û—à–∏–±–∫–∞ —Å–æ–µ–¥–∏–Ω–µ–Ω–∏—è: {e}")
        return False


def test_event_sending():
    """–¢–µ—Å—Ç –æ—Ç–ø—Ä–∞–≤–∫–∏ —Å–æ–±—ã—Ç–∏–π"""
    print("\nüì§ –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –æ—Ç–ø—Ä–∞–≤–∫–∏ —Å–æ–±—ã—Ç–∏–π...")
    
    success_count = 0
    total_count = 0
    
    for device in TEST_DEVICES:
        for employee in TEST_EMPLOYEES:
            # –°–ª—É—á–∞–π–Ω—ã–π —Ç–∏–ø —Å–æ–±—ã—Ç–∏—è
            event_type = random.choice(['entry', 'exit'])
            
            # –í—Ä–µ–º—è —Å–æ–±—ã—Ç–∏—è (–≤ –ø—Ä–µ–¥–µ–ª–∞—Ö –ø–æ—Å–ª–µ–¥–Ω–∏—Ö 24 —á–∞—Å–æ–≤)
            event_time = datetime.now() - timedelta(
                hours=random.randint(0, 24),
                minutes=random.randint(0, 59),
                seconds=random.randint(0, 59)
            )
            
            event_data = {
                "card_number": employee["employee_id"],
                "event_type": event_type,
                "timestamp": event_time.isoformat(),
                "device_info": {
                    "serial_number": device["serial"],
                    "model": "TestDevice-1000",
                    "firmware": "1.0.0",
                    "location": device["name"]
                }
            }
            
            try:
                # –ò–º–∏—Ç–∏—Ä—É–µ–º –∑–∞–ø—Ä–æ—Å –æ—Ç —É—Å—Ç—Ä–æ–π—Å—Ç–≤–∞ –ø–æ –µ–≥–æ IP
                headers = {'X-Forwarded-For': device["ip"]}
                
                response = requests.post(
                    f"{API_BASE}/event/",
                    json=event_data,
                    headers=headers,
                    timeout=5
                )
                
                total_count += 1
                
                if response.status_code == 200:
                    result = response.json()
                    if result['status'] == 'success':
                        print(f"‚úÖ {employee['name']} - {event_type} —á–µ—Ä–µ–∑ {device['name']}")
                        success_count += 1
                    else:
                        print(f"‚ö†Ô∏è  {employee['name']} - –æ—à–∏–±–∫–∞: {result['message']}")
                else:
                    print(f"‚ùå {employee['name']} - HTTP –æ—à–∏–±–∫–∞: {response.status_code}")
                    
            except requests.exceptions.RequestException as e:
                print(f"‚ùå {employee['name']} - –æ—à–∏–±–∫–∞ —Å–æ–µ–¥–∏–Ω–µ–Ω–∏—è: {e}")
                total_count += 1
    
    print(f"\nüìä –†–µ–∑—É–ª—å—Ç–∞—Ç—ã –æ—Ç–ø—Ä–∞–≤–∫–∏ —Å–æ–±—ã—Ç–∏–π:")
    print(f"   –£—Å–ø–µ—à–Ω–æ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ: {success_count}/{total_count}")
    print(f"   –ü—Ä–æ—Ü–µ–Ω—Ç —É—Å–ø–µ—Ö–∞: {(success_count/total_count)*100:.1f}%")
    
    return success_count > 0


def test_events_retrieval():
    """–¢–µ—Å—Ç –ø–æ–ª—É—á–µ–Ω–∏—è —Å–æ–±—ã—Ç–∏–π"""
    print("\nüì• –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –ø–æ–ª—É—á–µ–Ω–∏—è —Å–æ–±—ã—Ç–∏–π...")
    
    try:
        # –ü–æ–ª—É—á–∞–µ–º —Å–æ–±—ã—Ç–∏—è –∑–∞ –ø–æ—Å–ª–µ–¥–Ω–∏–µ 24 —á–∞—Å–∞
        response = requests.get(f"{API_BASE}/events/?hours=24")
        
        if response.status_code == 200:
            data = response.json()
            events = data['events']
            print(f"‚úÖ –ü–æ–ª—É—á–µ–Ω–æ —Å–æ–±—ã—Ç–∏–π: {len(events)}")
            
            if events:
                print("   –ü–æ—Å–ª–µ–¥–Ω–∏–µ —Å–æ–±—ã—Ç–∏—è:")
                for event in events[:5]:  # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –ø–µ—Ä–≤—ã–µ 5
                    print(f"   - {event['event_time']} | {event['employee_name']} | {event['event_type']} | {event['device_name']}")
            
            return True
        else:
            print(f"‚ùå –û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è —Å–æ–±—ã—Ç–∏–π: {response.status_code}")
            return False
            
    except requests.exceptions.RequestException as e:
        print(f"‚ùå –û—à–∏–±–∫–∞ —Å–æ–µ–¥–∏–Ω–µ–Ω–∏—è: {e}")
        return False


def test_status_endpoint():
    """–¢–µ—Å—Ç endpoint —Å—Ç–∞—Ç—É—Å–∞"""
    print("\nüìä –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ endpoint —Å—Ç–∞—Ç—É—Å–∞...")
    
    try:
        response = requests.get(f"{API_BASE}/status/")
        
        if response.status_code == 200:
            data = response.json()
            print(f"‚úÖ –°—Ç–∞—Ç—É—Å –ø–æ–ª—É—á–µ–Ω")
            print(f"   –í—Ä–µ–º—è —Å–µ—Ä–≤–µ—Ä–∞: {data['server_time']}")
            print(f"   –£—Å—Ç—Ä–æ–π—Å—Ç–≤ –≤—Å–µ–≥–æ: {data['total_devices']}")
            print(f"   –£—Å—Ç—Ä–æ–π—Å—Ç–≤ –æ–Ω–ª–∞–π–Ω: {data['online_devices']}")
            
            if data['devices']:
                print("   –°—Ç–∞—Ç—É—Å —É—Å—Ç—Ä–æ–π—Å—Ç–≤:")
                for ip, device_status in data['devices'].items():
                    status_icon = "‚úÖ" if device_status['is_online'] else "‚ùå"
                    print(f"   {status_icon} {device_status['device_name']} ({ip})")
            
            return True
        else:
            print(f"‚ùå –û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è —Å—Ç–∞—Ç—É—Å–∞: {response.status_code}")
            return False
            
    except requests.exceptions.RequestException as e:
        print(f"‚ùå –û—à–∏–±–∫–∞ —Å–æ–µ–¥–∏–Ω–µ–Ω–∏—è: {e}")
        return False


def simulate_workday():
    """–°–∏–º—É–ª—è—Ü–∏—è —Ä–∞–±–æ—á–µ–≥–æ –¥–Ω—è"""
    print("\nüè¢ –°–∏–º—É–ª—è—Ü–∏—è —Ä–∞–±–æ—á–µ–≥–æ –¥–Ω—è...")
    
    # –í—Ä–µ–º—è –Ω–∞—á–∞–ª–∞ –∏ –æ–∫–æ–Ω—á–∞–Ω–∏—è —Ä–∞–±–æ—á–µ–≥–æ –¥–Ω—è
    work_start = datetime.now().replace(hour=8, minute=0, second=0, microsecond=0)
    work_end = datetime.now().replace(hour=18, minute=0, second=0, microsecond=0)
    
    events_sent = 0
    
    for employee in TEST_EMPLOYEES:
        # –í—Ä–µ–º—è –ø—Ä–∏—Ö–æ–¥–∞ (8:00-9:30)
        arrival_time = work_start + timedelta(
            minutes=random.randint(0, 90)
        )
        
        # –í—Ä–µ–º—è —É—Ö–æ–¥–∞ (17:00-18:30)
        departure_time = work_end + timedelta(
            minutes=random.randint(-60, 30)
        )
        
        # –í—ã–±–∏—Ä–∞–µ–º —Å–ª—É—á–∞–π–Ω–æ–µ —É—Å—Ç—Ä–æ–π—Å—Ç–≤–æ
        device = random.choice(TEST_DEVICES)
        
        # –°–æ–±—ã—Ç–∏–µ –ø—Ä–∏—Ö–æ–¥–∞
        arrival_event = {
            "card_number": employee["employee_id"],
            "event_type": "entry",
            "timestamp": arrival_time.isoformat(),
            "device_info": {
                "serial_number": device["serial"],
                "model": "TestDevice-1000",
                "firmware": "1.0.0",
                "location": device["name"]
            }
        }
        
        # –°–æ–±—ã—Ç–∏–µ —É—Ö–æ–¥–∞
        departure_event = {
            "card_number": employee["employee_id"],
            "event_type": "exit",
            "timestamp": departure_time.isoformat(),
            "device_info": {
                "serial_number": device["serial"],
                "model": "TestDevice-1000",
                "firmware": "1.0.0",
                "location": device["name"]
            }
        }
        
        # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Å–æ–±—ã—Ç–∏—è
        headers = {'X-Forwarded-For': device["ip"]}
        
        try:
            # –ü—Ä–∏—Ö–æ–¥
            response = requests.post(
                f"{API_BASE}/event/",
                json=arrival_event,
                headers=headers,
                timeout=5
            )
            if response.status_code == 200:
                events_sent += 1
            
            # –£—Ö–æ–¥
            response = requests.post(
                f"{API_BASE}/event/",
                json=departure_event,
                headers=headers,
                timeout=5
            )
            if response.status_code == 200:
                events_sent += 1
                
            print(f"‚úÖ {employee['name']}: {arrival_time.strftime('%H:%M')} - {departure_time.strftime('%H:%M')}")
            
        except requests.exceptions.RequestException as e:
            print(f"‚ùå {employee['name']}: –æ—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏ - {e}")
    
    print(f"\nüìä –°–∏–º—É–ª—è—Ü–∏—è –∑–∞–≤–µ—Ä—à–µ–Ω–∞: –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ {events_sent} —Å–æ–±—ã—Ç–∏–π")
    return events_sent > 0


def main():
    """–û—Å–Ω–æ–≤–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è"""
    print("üß™ –¢–ï–°–¢–ò–†–û–í–ê–ù–ò–ï –ò–ù–¢–ï–ì–†–ê–¶–ò–ò –° –°–ö–£–î –°–ò–°–¢–ï–ú–û–ô")
    print("=" * 50)
    
    tests = [
        ("–°–æ–µ–¥–∏–Ω–µ–Ω–∏–µ —Å —Å–µ—Ä–≤–µ—Ä–æ–º", test_server_connection),
        ("–ü—Ä–æ–≤–µ—Ä–∫–∞ –∑–¥–æ—Ä–æ–≤—å—è", test_health_check),
        ("–û—Ç–ø—Ä–∞–≤–∫–∞ —Å–æ–±—ã—Ç–∏–π", test_event_sending),
        ("–ü–æ–ª—É—á–µ–Ω–∏–µ —Å–æ–±—ã—Ç–∏–π", test_events_retrieval),
        ("Endpoint —Å—Ç–∞—Ç—É—Å–∞", test_status_endpoint),
        ("–°–∏–º—É–ª—è—Ü–∏—è —Ä–∞–±–æ—á–µ–≥–æ –¥–Ω—è", simulate_workday),
    ]
    
    results = []
    
    for test_name, test_func in tests:
        try:
            result = test_func()
            results.append((test_name, result))
        except Exception as e:
            print(f"‚ùå –û—à–∏–±–∫–∞ –≤ —Ç–µ—Å—Ç–µ '{test_name}': {e}")
            results.append((test_name, False))
    
    # –ò—Ç–æ–≥–æ–≤—ã–π –æ—Ç—á–µ—Ç
    print("\n" + "=" * 50)
    print("üìã –ò–¢–û–ì–û–í–´–ô –û–¢–ß–ï–¢")
    print("=" * 50)
    
    passed = 0
    for test_name, result in results:
        status = "‚úÖ –ü–†–û–ô–î–ï–ù" if result else "‚ùå –ü–†–û–í–ê–õ–ï–ù"
        print(f"{status} - {test_name}")
        if result:
            passed += 1
    
    print(f"\nüéØ –†–µ–∑—É–ª—å—Ç–∞—Ç: {passed}/{len(results)} —Ç–µ—Å—Ç–æ–≤ –ø—Ä–æ–π–¥–µ–Ω–æ")
    
    if passed == len(results):
        print("üéâ –í–°–ï –¢–ï–°–¢–´ –ü–†–û–ô–î–ï–ù–´ –£–°–ü–ï–®–ù–û!")
    else:
        print("‚ö†Ô∏è  –ù–µ–∫–æ—Ç–æ—Ä—ã–µ —Ç–µ—Å—Ç—ã –ø—Ä–æ–≤–∞–ª–µ–Ω—ã. –ü—Ä–æ–≤–µ—Ä—å—Ç–µ –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ —Å–∏—Å—Ç–µ–º—ã.")


if __name__ == "__main__":
    main()
