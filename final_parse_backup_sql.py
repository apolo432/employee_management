#!/usr/bin/env python
"""
–§–∏–Ω–∞–ª—å–Ω—ã–π —Å–∫—Ä–∏–ø—Ç –¥–ª—è –ø–∞—Ä—Å–∏–Ω–≥–∞ backup.sql —Ñ–∞–π–ª–∞ –∏ —ç–∫—Å–ø–æ—Ä—Ç–∞ –¥–∞–Ω–Ω—ã—Ö —Å–æ—Ç—Ä—É–¥–Ω–∏–∫–æ–≤ –≤ Excel
"""

import re
import pandas as pd
from datetime import datetime
import os


def parse_backup_sql():
    """–ü–∞—Ä—Å–∏–Ω–≥ backup.sql —Ñ–∞–π–ª–∞ –∏ –∏–∑–≤–ª–µ—á–µ–Ω–∏–µ –¥–∞–Ω–Ω—ã—Ö —Å–æ—Ç—Ä—É–¥–Ω–∏–∫–æ–≤"""
    
    print("=== –ü–∞—Ä—Å–∏–Ω–≥ backup.sql —Ñ–∞–π–ª–∞ ===")
    
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º –Ω–∞–ª–∏—á–∏–µ —Ñ–∞–π–ª–∞
    if not os.path.exists('backup.sql'):
        print("‚ùå –§–∞–π–ª backup.sql –Ω–µ –Ω–∞–π–¥–µ–Ω!")
        return
    
    # –ß–∏—Ç–∞–µ–º —Ñ–∞–π–ª
    print("üìñ –ß—Ç–µ–Ω–∏–µ —Ñ–∞–π–ª–∞ backup.sql...")
    with open('backup.sql', 'r', encoding='utf-8') as file:
        content = file.read()
    
    # –ù–∞—Ö–æ–¥–∏–º —Å—Ç—Ä–æ–∫—É —Å COPY public.users
    copy_pattern = r'COPY public\.users \([^)]+\) FROM stdin;'
    copy_match = re.search(copy_pattern, content)
    
    if not copy_match:
        print("‚ùå –ù–µ –Ω–∞–π–¥–µ–Ω–∞ —Ç–∞–±–ª–∏—Ü–∞ users –≤ —Ñ–∞–π–ª–µ!")
        return
    
    print("‚úÖ –ù–∞–π–¥–µ–Ω–∞ —Ç–∞–±–ª–∏—Ü–∞ users")
    
    # –ü–æ–ª—É—á–∞–µ–º –ø–æ–∑–∏—Ü–∏—é –Ω–∞—á–∞–ª–∞ –¥–∞–Ω–Ω—ã—Ö
    data_start = copy_match.end()
    
    # –ù–∞—Ö–æ–¥–∏–º –∫–æ–Ω–µ—Ü –¥–∞–Ω–Ω—ã—Ö (—Å—Ç—Ä–æ–∫–∞ —Å \.)
    data_end_pattern = r'\n\\\.\n'
    data_end_match = re.search(data_end_pattern, content[data_start:])
    
    if not data_end_match:
        print("‚ùå –ù–µ –Ω–∞–π–¥–µ–Ω –∫–æ–Ω–µ—Ü –¥–∞–Ω–Ω—ã—Ö!")
        return
    
    # –ò–∑–≤–ª–µ–∫–∞–µ–º –¥–∞–Ω–Ω—ã–µ
    data_content = content[data_start:data_start + data_end_match.start()]
    data_lines = data_content.strip().split('\n')
    
    print(f"üìä –ù–∞–π–¥–µ–Ω–æ {len(data_lines)} –∑–∞–ø–∏—Å–µ–π")
    
    # –ü–∞—Ä—Å–∏–º –¥–∞–Ω–Ω—ã–µ
    employees = []
    
    for line_num, line in enumerate(data_lines, 1):
        if not line.strip():
            continue
            
        try:
            # –†–∞–∑–±–∏–≤–∞–µ–º —Å—Ç—Ä–æ–∫—É –ø–æ —Ç–∞–±—É–ª—è—Ü–∏–∏
            fields = line.split('\t')
            
            if len(fields) < 39:  # –ú–∏–Ω–∏–º–∞–ª—å–Ω–æ–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –ø–æ–ª–µ–π
                continue
            
            # –°–æ–∑–¥–∞–µ–º —Å–ª–æ–≤–∞—Ä—å –¥–ª—è —Ç–µ–∫—É—â–µ–≥–æ —Å–æ—Ç—Ä—É–¥–Ω–∏–∫–∞
            employee_data = {
                'fio': fields[4].strip() if len(fields) > 4 and fields[4] != '\\N' else '',
                'id': fields[0].strip() if len(fields) > 0 and fields[0] != '\\N' else '',
                'first_name': fields[1].strip() if len(fields) > 1 and fields[1] != '\\N' else '',
                'last_name': fields[2].strip() if len(fields) > 2 and fields[2] != '\\N' else '',
                'middle_name': fields[3].strip() if len(fields) > 3 and fields[3] != '\\N' else '',
                'work_start_time': fields[20].strip() if len(fields) > 20 and fields[20] != '\\N' else '',
                'work_end_time': fields[21].strip() if len(fields) > 21 and fields[21] != '\\N' else '',
                'birth_date': fields[34].strip() if len(fields) > 34 and fields[34] != '\\N' else ''
            }
            
            employees.append(employee_data)
            
        except Exception as e:
            print(f"‚ö†Ô∏è –û—à–∏–±–∫–∞ –≤ —Å—Ç—Ä–æ–∫–µ {line_num}: {e}")
            continue
    
    print(f"‚úÖ –£—Å–ø–µ—à–Ω–æ –æ–±—Ä–∞–±–æ—Ç–∞–Ω–æ {len(employees)} –∑–∞–ø–∏—Å–µ–π")
    
    return employees


def export_to_excel(employees, filename='employees_final.xlsx'):
    """–≠–∫—Å–ø–æ—Ä—Ç –¥–∞–Ω–Ω—ã—Ö –≤ Excel —Ñ–∞–π–ª"""
    
    print(f"\n=== –≠–∫—Å–ø–æ—Ä—Ç –≤ Excel —Ñ–∞–π–ª: {filename} ===")
    
    if not employees:
        print("‚ùå –ù–µ—Ç –¥–∞–Ω–Ω—ã—Ö –¥–ª—è —ç–∫—Å–ø–æ—Ä—Ç–∞!")
        return
    
    # –°–æ–∑–¥–∞–µ–º DataFrame
    df = pd.DataFrame(employees)
    
    # –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º –ø–æ—Ä—è–¥–æ–∫ –∫–æ–ª–æ–Ω–æ–∫
    columns_order = [
        'fio',
        'id', 
        'first_name',
        'last_name',
        'middle_name',
        'work_start_time',
        'work_end_time',
        'birth_date'
    ]
    
    df = df[columns_order]
    
    # –ü–µ—Ä–µ–∏–º–µ–Ω–æ–≤—ã–≤–∞–µ–º –∫–æ–ª–æ–Ω–∫–∏ –Ω–∞ —Ä—É—Å—Å–∫–∏–π
    column_names = {
        'fio': '–§–ò–û',
        'id': 'ID',
        'first_name': '–ò–º—è',
        'last_name': '–§–∞–º–∏–ª–∏—è', 
        'middle_name': '–û—Ç—á–µ—Å—Ç–≤–æ',
        'work_start_time': '–í—Ä–µ–º—è –Ω–∞—á–∞–ª–∞ —Ä–∞–±–æ—Ç—ã',
        'work_end_time': '–í—Ä–µ–º—è –æ–∫–æ–Ω—á–∞–Ω–∏—è —Ä–∞–±–æ—Ç—ã',
        'birth_date': '–î–∞—Ç–∞ —Ä–æ–∂–¥–µ–Ω–∏—è'
    }
    
    df = df.rename(columns=column_names)
    
    # –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º –≤—Ä–µ–º—è —Ä–∞–±–æ—Ç—ã
    def format_time(time_str):
        if not time_str or time_str.strip() == '':
            return ''
        try:
            # –ï—Å–ª–∏ –≤—Ä–µ–º—è –≤ —Ñ–æ—Ä–º–∞—Ç–µ HH:MM:SS –∏–ª–∏ HH:MM
            if ':' in time_str:
                return time_str
            # –ï—Å–ª–∏ –≤—Ä–µ–º—è –≤ —á–∏—Å–ª–æ–≤–æ–º —Ñ–æ—Ä–º–∞—Ç–µ (–Ω–∞–ø—Ä–∏–º–µ—Ä, 900 –¥–ª—è 09:00)
            elif time_str.isdigit() and len(time_str) >= 3:
                hours = int(time_str) // 100
                minutes = int(time_str) % 100
                return f"{hours:02d}:{minutes:02d}"
            else:
                return time_str
        except:
            return time_str
    
    df['–í—Ä–µ–º—è –Ω–∞—á–∞–ª–∞ —Ä–∞–±–æ—Ç—ã'] = df['–í—Ä–µ–º—è –Ω–∞—á–∞–ª–∞ —Ä–∞–±–æ—Ç—ã'].apply(format_time)
    df['–í—Ä–µ–º—è –æ–∫–æ–Ω—á–∞–Ω–∏—è —Ä–∞–±–æ—Ç—ã'] = df['–í—Ä–µ–º—è –æ–∫–æ–Ω—á–∞–Ω–∏—è —Ä–∞–±–æ—Ç—ã'].apply(format_time)
    
    # –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º –¥–∞—Ç—É —Ä–æ–∂–¥–µ–Ω–∏—è
    def format_date(date_str):
        if not date_str or date_str.strip() == '':
            return ''
        return date_str
    
    df['–î–∞—Ç–∞ —Ä–æ–∂–¥–µ–Ω–∏—è'] = df['–î–∞—Ç–∞ —Ä–æ–∂–¥–µ–Ω–∏—è'].apply(format_date)
    
    # –≠–∫—Å–ø–æ—Ä—Ç–∏—Ä—É–µ–º –≤ Excel
    try:
        with pd.ExcelWriter(filename, engine='openpyxl') as writer:
            df.to_excel(writer, sheet_name='–°–æ—Ç—Ä—É–¥–Ω–∏–∫–∏', index=False)
            
            # –ù–∞—Å—Ç—Ä–∞–∏–≤–∞–µ–º —à–∏—Ä–∏–Ω—É –∫–æ–ª–æ–Ω–æ–∫
            worksheet = writer.sheets['–°–æ—Ç—Ä—É–¥–Ω–∏–∫–∏']
            for column in worksheet.columns:
                max_length = 0
                column_letter = column[0].column_letter
                for cell in column:
                    try:
                        if len(str(cell.value)) > max_length:
                            max_length = len(str(cell.value))
                    except:
                        pass
                adjusted_width = min(max_length + 2, 50)
                worksheet.column_dimensions[column_letter].width = adjusted_width
        
        print(f"‚úÖ –§–∞–π–ª {filename} —É—Å–ø–µ—à–Ω–æ —Å–æ–∑–¥–∞–Ω!")
        print(f"üìä –≠–∫—Å–ø–æ—Ä—Ç–∏—Ä–æ–≤–∞–Ω–æ {len(df)} –∑–∞–ø–∏—Å–µ–π")
        
        # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É
        print(f"\n=== –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ ===")
        print(f"–í—Å–µ–≥–æ –∑–∞–ø–∏—Å–µ–π: {len(df)}")
        print(f"–° –§–ò–û: {len(df[df['–§–ò–û'].str.strip() != ''])}")
        print(f"–° –∏–º–µ–Ω–µ–º: {len(df[df['–ò–º—è'].str.strip() != ''])}")
        print(f"–° —Ñ–∞–º–∏–ª–∏–µ–π: {len(df[df['–§–∞–º–∏–ª–∏—è'].str.strip() != ''])}")
        print(f"–° –æ—Ç—á–µ—Å—Ç–≤–æ–º: {len(df[df['–û—Ç—á–µ—Å—Ç–≤–æ'].str.strip() != ''])}")
        print(f"–° –≤—Ä–µ–º–µ–Ω–µ–º –Ω–∞—á–∞–ª–∞: {len(df[df['–í—Ä–µ–º—è –Ω–∞—á–∞–ª–∞ —Ä–∞–±–æ—Ç—ã'].str.strip() != ''])}")
        print(f"–° –≤—Ä–µ–º–µ–Ω–µ–º –æ–∫–æ–Ω—á–∞–Ω–∏—è: {len(df[df['–í—Ä–µ–º—è –æ–∫–æ–Ω—á–∞–Ω–∏—è —Ä–∞–±–æ—Ç—ã'].str.strip() != ''])}")
        print(f"–° –¥–∞—Ç–æ–π —Ä–æ–∂–¥–µ–Ω–∏—è: {len(df[df['–î–∞—Ç–∞ —Ä–æ–∂–¥–µ–Ω–∏—è'].str.strip() != ''])}")
        
        # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –ø—Ä–∏–º–µ—Ä—ã –∑–∞–ø–∏—Å–µ–π —Å –≤—Ä–µ–º–µ–Ω–µ–º —Ä–∞–±–æ—Ç—ã
        print(f"\n=== –ü—Ä–∏–º–µ—Ä—ã –∑–∞–ø–∏—Å–µ–π —Å –≤—Ä–µ–º–µ–Ω–µ–º —Ä–∞–±–æ—Ç—ã ===")
        with_time = df[(df['–í—Ä–µ–º—è –Ω–∞—á–∞–ª–∞ —Ä–∞–±–æ—Ç—ã'].str.strip() != '') | (df['–í—Ä–µ–º—è –æ–∫–æ–Ω—á–∞–Ω–∏—è —Ä–∞–±–æ—Ç—ã'].str.strip() != '')]
        if len(with_time) > 0:
            print(f"–ù–∞–π–¥–µ–Ω–æ {len(with_time)} –∑–∞–ø–∏—Å–µ–π —Å –≤—Ä–µ–º–µ–Ω–µ–º —Ä–∞–±–æ—Ç—ã:")
            print(with_time.head(10).to_string(index=False))
        else:
            print("‚ÑπÔ∏è –í –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö –Ω–µ—Ç –∑–∞–ø–∏—Å–µ–π —Å —É–∫–∞–∑–∞–Ω–Ω—ã–º –≤—Ä–µ–º–µ–Ω–µ–º —Ä–∞–±–æ—Ç—ã")
        
        # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –ø–µ—Ä–≤—ã–µ 10 –∑–∞–ø–∏—Å–µ–π
        print(f"\n=== –ü–µ—Ä–≤—ã–µ 10 –∑–∞–ø–∏—Å–µ–π ===")
        print(df.head(10).to_string(index=False))
        
        # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –ø—Ä–∏–º–µ—Ä—ã —Å –¥–∞—Ç–æ–π —Ä–æ–∂–¥–µ–Ω–∏—è
        print(f"\n=== –ü—Ä–∏–º–µ—Ä—ã –∑–∞–ø–∏—Å–µ–π —Å –¥–∞—Ç–æ–π —Ä–æ–∂–¥–µ–Ω–∏—è ===")
        with_birth_date = df[df['–î–∞—Ç–∞ —Ä–æ–∂–¥–µ–Ω–∏—è'].str.strip() != '']
        if len(with_birth_date) > 0:
            print(f"–ù–∞–π–¥–µ–Ω–æ {len(with_birth_date)} –∑–∞–ø–∏—Å–µ–π —Å –¥–∞—Ç–æ–π —Ä–æ–∂–¥–µ–Ω–∏—è:")
            print(with_birth_date[['–§–ò–û', '–î–∞—Ç–∞ —Ä–æ–∂–¥–µ–Ω–∏—è']].head(10).to_string(index=False))
        
    except Exception as e:
        print(f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ —ç–∫—Å–ø–æ—Ä—Ç–µ –≤ Excel: {e}")


def main():
    """–û—Å–Ω–æ–≤–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è"""
    
    print("üöÄ –ó–∞–ø—É—Å–∫ —Ñ–∏–Ω–∞–ª—å–Ω–æ–≥–æ –ø–∞—Ä—Å–µ—Ä–∞ backup.sql")
    print(f"‚è∞ –í—Ä–µ–º—è –∑–∞–ø—É—Å–∫–∞: {datetime.now().strftime('%Y-%m-%d %H:%M:%S')}")
    
    # –ü–∞—Ä—Å–∏–º –¥–∞–Ω–Ω—ã–µ
    employees = parse_backup_sql()
    
    if employees:
        # –≠–∫—Å–ø–æ—Ä—Ç–∏—Ä—É–µ–º –≤ Excel
        export_to_excel(employees)
        
        print(f"\n‚úÖ –ü–∞—Ä—Å–∏–Ω–≥ –∑–∞–≤–µ—Ä—à–µ–Ω —É—Å–ø–µ—à–Ω–æ!")
        print(f"üìÅ –§–∞–π–ª employees_final.xlsx —Å–æ–∑–¥–∞–Ω –≤ —Ç–µ–∫—É—â–µ–π –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏–∏")
        print(f"\nüìã –≠–∫—Å–ø–æ—Ä—Ç–∏—Ä–æ–≤–∞–Ω–Ω—ã–µ –ø–æ–ª—è:")
        print(f"   ‚Ä¢ –§–ò–û")
        print(f"   ‚Ä¢ ID") 
        print(f"   ‚Ä¢ –ò–º—è")
        print(f"   ‚Ä¢ –§–∞–º–∏–ª–∏—è")
        print(f"   ‚Ä¢ –û—Ç—á–µ—Å—Ç–≤–æ")
        print(f"   ‚Ä¢ –í—Ä–µ–º—è –Ω–∞—á–∞–ª–∞ —Ä–∞–±–æ—Ç—ã")
        print(f"   ‚Ä¢ –í—Ä–µ–º—è –æ–∫–æ–Ω—á–∞–Ω–∏—è —Ä–∞–±–æ—Ç—ã")
        print(f"   ‚Ä¢ –î–∞—Ç–∞ —Ä–æ–∂–¥–µ–Ω–∏—è")
    else:
        print(f"\n‚ùå –ü–∞—Ä—Å–∏–Ω–≥ –∑–∞–≤–µ—Ä—à–∏–ª—Å—è —Å –æ—à–∏–±–∫–∞–º–∏")


if __name__ == "__main__":
    main()




