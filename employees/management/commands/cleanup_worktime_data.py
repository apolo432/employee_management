"""
Management –∫–æ–º–∞–Ω–¥–∞ –¥–ª—è –æ—á–∏—Å—Ç–∫–∏ —Å—Ç–∞—Ä—ã—Ö –¥–∞–Ω–Ω—ã—Ö —Ä–∞–±–æ—á–µ–≥–æ –≤—Ä–µ–º–µ–Ω–∏
"""

from django.core.management.base import BaseCommand, CommandError
from django.utils import timezone
from django.db import transaction
from datetime import datetime, date, timedelta

from employees.models import WorkSession, WorkDaySummary, WorkTimeAuditLog, SKUDEvent


class Command(BaseCommand):
    help = '–û—á–∏—Å—Ç–∫–∞ —Å—Ç–∞—Ä—ã—Ö –¥–∞–Ω–Ω—ã—Ö —Ä–∞–±–æ—á–µ–≥–æ –≤—Ä–µ–º–µ–Ω–∏'

    def add_arguments(self, parser):
        parser.add_argument(
            '--older-than-days',
            type=int,
            default=365,
            help='–£–¥–∞–ª–∏—Ç—å –¥–∞–Ω–Ω—ã–µ —Å—Ç–∞—Ä—à–µ —É–∫–∞–∑–∞–Ω–Ω–æ–≥–æ –∫–æ–ª–∏—á–µ—Å—Ç–≤–∞ –¥–Ω–µ–π (–ø–æ —É–º–æ–ª—á–∞–Ω–∏—é 365)',
        )
        parser.add_argument(
            '--keep-audit-logs',
            action='store_true',
            help='–°–æ—Ö—Ä–∞–Ω–∏—Ç—å –∑–∞–ø–∏—Å–∏ –∞—É–¥–∏—Ç–∞ (–ø–æ —É–º–æ–ª—á–∞–Ω–∏—é —É–¥–∞–ª—è—é—Ç—Å—è)',
        )
        parser.add_argument(
            '--keep-skud-events',
            action='store_true',
            help='–°–æ—Ö—Ä–∞–Ω–∏—Ç—å —Å–æ–±—ã—Ç–∏—è –°–ö–£–î (–ø–æ —É–º–æ–ª—á–∞–Ω–∏—é —É–¥–∞–ª—è—é—Ç—Å—è)',
        )
        parser.add_argument(
            '--dry-run',
            action='store_true',
            help='–ü–æ–∫–∞–∑–∞—Ç—å —á—Ç–æ –±—É–¥–µ—Ç —É–¥–∞–ª–µ–Ω–æ –±–µ–∑ –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è',
        )
        parser.add_argument(
            '--verbose',
            action='store_true',
            help='–ü–æ–¥—Ä–æ–±–Ω—ã–π –≤—ã–≤–æ–¥ –ø—Ä–æ—Ü–µ—Å—Å–∞',
        )

    def handle(self, *args, **options):
        self.verbosity = options['verbose']
        older_than_days = options['older_than_days']
        keep_audit_logs = options['keep_audit_logs']
        keep_skud_events = options['keep_skud_events']
        dry_run = options['dry_run']

        # –í—ã—á–∏—Å–ª—è–µ–º –¥–∞—Ç—É –æ—Ç—Å–µ—á–µ–Ω–∏—è
        cutoff_date = date.today() - timedelta(days=older_than_days)

        self.stdout.write(
            self.style.SUCCESS(f'üßπ –û—á–∏—Å—Ç–∫–∞ –¥–∞–Ω–Ω—ã—Ö —Å—Ç–∞—Ä—à–µ {cutoff_date} ({older_than_days} –¥–Ω–µ–π)')
        )
        
        if dry_run:
            self.stdout.write(self.style.WARNING('‚ö†Ô∏è  –†–ï–ñ–ò–ú –ü–†–û–°–ú–û–¢–†–ê - –¥–∞–Ω–Ω—ã–µ –Ω–µ –±—É–¥—É—Ç —É–¥–∞–ª–µ–Ω—ã'))

        # –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –¥–ª—è —É–¥–∞–ª–µ–Ω–∏—è
        stats = {
            'sessions': 0,
            'summaries': 0,
            'audit_logs': 0,
            'skud_events': 0
        }

        try:
            # –ü–æ–¥—Å—á–∏—Ç—ã–≤–∞–µ–º –¥–∞–Ω–Ω—ã–µ –¥–ª—è —É–¥–∞–ª–µ–Ω–∏—è
            self.stdout.write('\nüìä –ü–æ–¥—Å—á—ë—Ç –¥–∞–Ω–Ω—ã—Ö –¥–ª—è —É–¥–∞–ª–µ–Ω–∏—è...')
            
            # –†–∞–±–æ—á–∏–µ —Å–µ—Å—Å–∏–∏
            sessions_to_delete = WorkSession.objects.filter(date__lt=cutoff_date)
            stats['sessions'] = sessions_to_delete.count()
            
            # –°–≤–æ–¥–∫–∏ –¥–Ω–µ–π
            summaries_to_delete = WorkDaySummary.objects.filter(date__lt=cutoff_date)
            stats['summaries'] = summaries_to_delete.count()
            
            # –ó–∞–ø–∏—Å–∏ –∞—É–¥–∏—Ç–∞
            if not keep_audit_logs:
                audit_logs_to_delete = WorkTimeAuditLog.objects.filter(date__lt=cutoff_date)
                stats['audit_logs'] = audit_logs_to_delete.count()
            
            # –°–æ–±—ã—Ç–∏—è –°–ö–£–î
            if not keep_skud_events:
                skud_events_to_delete = SKUDEvent.objects.filter(event_time__date__lt=cutoff_date)
                stats['skud_events'] = skud_events_to_delete.count()

            # –í—ã–≤–æ–¥–∏–º —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É
            self.stdout.write(f'üìÖ –†–∞–±–æ—á–∏—Ö —Å–µ—Å—Å–∏–π: {stats["sessions"]}')
            self.stdout.write(f'üìä –°–≤–æ–¥–æ–∫ –¥–Ω–µ–π: {stats["summaries"]}')
            
            if not keep_audit_logs:
                self.stdout.write(f'üìù –ó–∞–ø–∏—Å–µ–π –∞—É–¥–∏—Ç–∞: {stats["audit_logs"]}')
            else:
                self.stdout.write('üìù –ó–∞–ø–∏—Å–∏ –∞—É–¥–∏—Ç–∞: —Å–æ—Ö—Ä–∞–Ω—è—é—Ç—Å—è')
            
            if not keep_skud_events:
                self.stdout.write(f'üîî –°–æ–±—ã—Ç–∏–π –°–ö–£–î: {stats["skud_events"]}')
            else:
                self.stdout.write('üîî –°–æ–±—ã—Ç–∏—è –°–ö–£–î: —Å–æ—Ö—Ä–∞–Ω—è—é—Ç—Å—è')

            total_to_delete = sum(stats.values())
            
            if total_to_delete == 0:
                self.stdout.write(self.style.SUCCESS('\n‚úÖ –ù–µ—Ç –¥–∞–Ω–Ω—ã—Ö –¥–ª—è —É–¥–∞–ª–µ–Ω–∏—è'))
                return

            self.stdout.write(f'\nüóëÔ∏è  –í—Å–µ–≥–æ –∑–∞–ø–∏—Å–µ–π –¥–ª—è —É–¥–∞–ª–µ–Ω–∏—è: {total_to_delete}')

            # –ó–∞–ø—Ä–∞—à–∏–≤–∞–µ–º –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏–µ
            if not dry_run:
                confirm = input('\n‚ùì –ü—Ä–æ–¥–æ–ª–∂–∏—Ç—å —É–¥–∞–ª–µ–Ω–∏–µ? (yes/no): ')
                if confirm.lower() not in ['yes', 'y', '–¥–∞', '–¥']:
                    self.stdout.write(self.style.WARNING('‚ùå –û–ø–µ—Ä–∞—Ü–∏—è –æ—Ç–º–µ–Ω–µ–Ω–∞'))
                    return

            # –í—ã–ø–æ–ª–Ω—è–µ–º —É–¥–∞–ª–µ–Ω–∏–µ
            if not dry_run:
                self.stdout.write('\nüóëÔ∏è  –ù–∞—á–∏–Ω–∞–µ–º —É–¥–∞–ª–µ–Ω–∏–µ...')
                
                with transaction.atomic():
                    # –£–¥–∞–ª—è–µ–º —Ä–∞–±–æ—á–∏–µ —Å–µ—Å—Å–∏–∏
                    if stats['sessions'] > 0:
                        if self.verbosity:
                            self.stdout.write('   –£–¥–∞–ª–µ–Ω–∏–µ —Ä–∞–±–æ—á–∏—Ö —Å–µ—Å—Å–∏–π...')
                        deleted_sessions = sessions_to_delete.delete()[0]
                        self.stdout.write(f'   ‚úÖ –£–¥–∞–ª–µ–Ω–æ —Å–µ—Å—Å–∏–π: {deleted_sessions}')
                    
                    # –£–¥–∞–ª—è–µ–º —Å–≤–æ–¥–∫–∏ –¥–Ω–µ–π
                    if stats['summaries'] > 0:
                        if self.verbosity:
                            self.stdout.write('   –£–¥–∞–ª–µ–Ω–∏–µ —Å–≤–æ–¥–æ–∫ –¥–Ω–µ–π...')
                        deleted_summaries = summaries_to_delete.delete()[0]
                        self.stdout.write(f'   ‚úÖ –£–¥–∞–ª–µ–Ω–æ —Å–≤–æ–¥–æ–∫: {deleted_summaries}')
                    
                    # –£–¥–∞–ª—è–µ–º –∑–∞–ø–∏—Å–∏ –∞—É–¥–∏—Ç–∞
                    if not keep_audit_logs and stats['audit_logs'] > 0:
                        if self.verbosity:
                            self.stdout.write('   –£–¥–∞–ª–µ–Ω–∏–µ –∑–∞–ø–∏—Å–µ–π –∞—É–¥–∏—Ç–∞...')
                        deleted_audit = audit_logs_to_delete.delete()[0]
                        self.stdout.write(f'   ‚úÖ –£–¥–∞–ª–µ–Ω–æ –∑–∞–ø–∏—Å–µ–π –∞—É–¥–∏—Ç–∞: {deleted_audit}')
                    
                    # –£–¥–∞–ª—è–µ–º —Å–æ–±—ã—Ç–∏—è –°–ö–£–î
                    if not keep_skud_events and stats['skud_events'] > 0:
                        if self.verbosity:
                            self.stdout.write('   –£–¥–∞–ª–µ–Ω–∏–µ —Å–æ–±—ã—Ç–∏–π –°–ö–£–î...')
                        deleted_events = skud_events_to_delete.delete()[0]
                        self.stdout.write(f'   ‚úÖ –£–¥–∞–ª–µ–Ω–æ —Å–æ–±—ã—Ç–∏–π –°–ö–£–î: {deleted_events}')

                self.stdout.write(self.style.SUCCESS('\nüéâ –û—á–∏—Å—Ç–∫–∞ –∑–∞–≤–µ—Ä—à–µ–Ω–∞ —É—Å–ø–µ—à–Ω–æ!'))
            else:
                self.stdout.write(self.style.WARNING('\n‚ö†Ô∏è  –†–ï–ñ–ò–ú –ü–†–û–°–ú–û–¢–†–ê - –¥–∞–Ω–Ω—ã–µ –Ω–µ —É–¥–∞–ª–µ–Ω—ã'))

        except KeyboardInterrupt:
            self.stdout.write(self.style.WARNING('\n‚ö†Ô∏è  –û—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–º'))
        except Exception as e:
            self.stdout.write(self.style.ERROR(f'\n‚ùå –ö—Ä–∏—Ç–∏—á–µ—Å–∫–∞—è –æ—à–∏–±–∫–∞: {str(e)}'))
            raise

        # –†–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–∏
        self.stdout.write('\nüí° –†–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–∏:')
        
        if older_than_days > 730:  # –ë–æ–ª—å—à–µ 2 –ª–µ—Ç
            self.stdout.write('   - –†–∞—Å—Å–º–æ—Ç—Ä–∏—Ç–µ –≤–æ–∑–º–æ–∂–Ω–æ—Å—Ç—å –∞—Ä—Ö–∏–≤–∏—Ä–æ–≤–∞–Ω–∏—è –¥–∞–Ω–Ω—ã—Ö –≤–º–µ—Å—Ç–æ —É–¥–∞–ª–µ–Ω–∏—è')
        
        if not keep_skud_events:
            self.stdout.write('   - –°–æ–±—ã—Ç–∏—è –°–ö–£–î —É–¥–∞–ª–µ–Ω—ã - –≤–æ—Å—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∏–µ –Ω–µ–≤–æ–∑–º–æ–∂–Ω–æ')
        
        if not keep_audit_logs:
            self.stdout.write('   - –ó–∞–ø–∏—Å–∏ –∞—É–¥–∏—Ç–∞ —É–¥–∞–ª–µ–Ω—ã - –∏—Å—Ç–æ—Ä–∏—è –∏–∑–º–µ–Ω–µ–Ω–∏–π –ø–æ—Ç–µ—Ä—è–Ω–∞')
        
        self.stdout.write(f'   - –î–ª—è –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–æ–π –æ—á–∏—Å—Ç–∫–∏ –Ω–∞—Å—Ç—Ä–æ–π—Ç–µ cron –∑–∞–¥–∞—á—É —Å –ø–µ—Ä–∏–æ–¥–æ–º {older_than_days} –¥–Ω–µ–π')

        # –°–æ–∑–¥–∞—ë–º –∑–∞–ø–∏—Å—å –∞—É–¥–∏—Ç–∞ –æ –æ—á–∏—Å—Ç–∫–µ
        if not dry_run and total_to_delete > 0:
            try:
                from employees.models import Employee
                
                # –°–æ–∑–¥–∞—ë–º —Å–∏—Å—Ç–µ–º–Ω—É—é –∑–∞–ø–∏—Å—å –∞—É–¥–∏—Ç–∞
                WorkTimeAuditLog.objects.create(
                    employee=None,  # –°–∏—Å—Ç–µ–º–Ω–∞—è –æ–ø–µ—Ä–∞—Ü–∏—è
                    date=date.today(),
                    action='bulk_import',  # –ò—Å–ø–æ–ª—å–∑—É–µ–º —Å—É—â–µ—Å—Ç–≤—É—é—â–∏–π —Ç–∏–ø
                    description=f'–û—á–∏—Å—Ç–∫–∞ –¥–∞–Ω–Ω—ã—Ö —Å—Ç–∞—Ä—à–µ {cutoff_date}. –£–¥–∞–ª–µ–Ω–æ: '
                              f'{stats["sessions"]} —Å–µ—Å—Å–∏–π, {stats["summaries"]} —Å–≤–æ–¥–æ–∫, '
                              f'{stats["audit_logs"]} –∑–∞–ø–∏—Å–µ–π –∞—É–¥–∏—Ç–∞, {stats["skud_events"]} —Å–æ–±—ã—Ç–∏–π –°–ö–£–î',
                    reason=f'Management –∫–æ–º–∞–Ω–¥–∞ cleanup_worktime_data (--older-than-days={older_than_days})',
                    changed_by=None
                )
                
                self.stdout.write('üìù –°–æ–∑–¥–∞–Ω–∞ –∑–∞–ø–∏—Å—å –∞—É–¥–∏—Ç–∞ –æ–± –æ—á–∏—Å—Ç–∫–µ')
            except Exception as e:
                self.stdout.write(self.style.WARNING(f'‚ö†Ô∏è  –ù–µ —É–¥–∞–ª–æ—Å—å —Å–æ–∑–¥–∞—Ç—å –∑–∞–ø–∏—Å—å –∞—É–¥–∏—Ç–∞: {e}'))
