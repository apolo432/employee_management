"""
Management –∫–æ–º–∞–Ω–¥–∞ –¥–ª—è –º–∞—Å—Å–æ–≤–æ–π –æ–±—Ä–∞–±–æ—Ç–∫–∏ —Å–æ–±—ã—Ç–∏–π –°–ö–£–î
"""

from django.core.management.base import BaseCommand, CommandError
from django.utils import timezone
from django.db import transaction
from datetime import datetime, date, timedelta
from collections import defaultdict

from employees.models import Employee, SKUDEvent, WorkSession, WorkDaySummary
from employees.work_time_processor import WorkTimeProcessor


class Command(BaseCommand):
    help = '–ú–∞—Å—Å–æ–≤–∞—è –æ–±—Ä–∞–±–æ—Ç–∫–∞ –Ω–µ–æ–±—Ä–∞–±–æ—Ç–∞–Ω–Ω—ã—Ö —Å–æ–±—ã—Ç–∏–π –°–ö–£–î'

    def add_arguments(self, parser):
        parser.add_argument(
            '--batch-size',
            type=int,
            default=1000,
            help='–†–∞–∑–º–µ—Ä –ø–∞–∫–µ—Ç–∞ –¥–ª—è –æ–±—Ä–∞–±–æ—Ç–∫–∏ (–ø–æ —É–º–æ–ª—á–∞–Ω–∏—é 1000)',
        )
        parser.add_argument(
            '--from-date',
            type=str,
            help='–ù–∞—á–∞–ª—å–Ω–∞—è –¥–∞—Ç–∞ –¥–ª—è –æ–±—Ä–∞–±–æ—Ç–∫–∏ –≤ —Ñ–æ—Ä–º–∞—Ç–µ YYYY-MM-DD',
        )
        parser.add_argument(
            '--to-date',
            type=str,
            help='–ö–æ–Ω–µ—á–Ω–∞—è –¥–∞—Ç–∞ –¥–ª—è –æ–±—Ä–∞–±–æ—Ç–∫–∏ –≤ —Ñ–æ—Ä–º–∞—Ç–µ YYYY-MM-DD',
        )
        parser.add_argument(
            '--employee-id',
            type=str,
            help='ID –∫–æ–Ω–∫—Ä–µ—Ç–Ω–æ–≥–æ —Å–æ—Ç—Ä—É–¥–Ω–∏–∫–∞ –¥–ª—è –æ–±—Ä–∞–±–æ—Ç–∫–∏',
        )
        parser.add_argument(
            '--device-id',
            type=str,
            help='ID –∫–æ–Ω–∫—Ä–µ—Ç–Ω–æ–≥–æ —É—Å—Ç—Ä–æ–π—Å—Ç–≤–∞ –¥–ª—è –æ–±—Ä–∞–±–æ—Ç–∫–∏',
        )
        parser.add_argument(
            '--force-process',
            action='store_true',
            help='–ü—Ä–∏–Ω—É–¥–∏—Ç–µ–ª—å–Ω–∞—è –æ–±—Ä–∞–±–æ—Ç–∫–∞ —É–∂–µ –æ–±—Ä–∞–±–æ—Ç–∞–Ω–Ω—ã—Ö —Å–æ–±—ã—Ç–∏–π',
        )
        parser.add_argument(
            '--dry-run',
            action='store_true',
            help='–ü–æ–∫–∞–∑–∞—Ç—å —á—Ç–æ –±—É–¥–µ—Ç –æ–±—Ä–∞–±–æ—Ç–∞–Ω–æ –±–µ–∑ –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è –∏–∑–º–µ–Ω–µ–Ω–∏–π',
        )
        parser.add_argument(
            '--verbose',
            action='store_true',
            help='–ü–æ–¥—Ä–æ–±–Ω—ã–π –≤—ã–≤–æ–¥ –ø—Ä–æ—Ü–µ—Å—Å–∞',
        )

    def handle(self, *args, **options):
        self.verbosity = options['verbose']
        batch_size = options['batch_size']
        force_process = options['force_process']
        dry_run = options['dry_run']

        # –ü–∞—Ä—Å–∏–º –¥–∞—Ç—ã –µ—Å–ª–∏ —É–∫–∞–∑–∞–Ω—ã
        from_date = None
        to_date = None
        
        if options['from_date']:
            try:
                from_date = datetime.strptime(options['from_date'], '%Y-%m-%d').date()
            except ValueError:
                raise CommandError('–ù–µ–≤–µ—Ä–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç –Ω–∞—á–∞–ª—å–Ω–æ–π –¥–∞—Ç—ã. –ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ YYYY-MM-DD')

        if options['to_date']:
            try:
                to_date = datetime.strptime(options['to_date'], '%Y-%m-%d').date()
            except ValueError:
                raise CommandError('–ù–µ–≤–µ—Ä–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç –∫–æ–Ω–µ—á–Ω–æ–π –¥–∞—Ç—ã. –ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ YYYY-MM-DD')

        if from_date and to_date and from_date > to_date:
            raise CommandError('–ù–∞—á–∞–ª—å–Ω–∞—è –¥–∞—Ç–∞ –Ω–µ –º–æ–∂–µ—Ç –±—ã—Ç—å –ø–æ–∑–∂–µ –∫–æ–Ω–µ—á–Ω–æ–π')

        self.stdout.write(
            self.style.SUCCESS('üöÄ –ù–∞—á–∏–Ω–∞–µ–º –º–∞—Å—Å–æ–≤—É—é –æ–±—Ä–∞–±–æ—Ç–∫—É —Å–æ–±—ã—Ç–∏–π –°–ö–£–î')
        )
        
        if dry_run:
            self.stdout.write(self.style.WARNING('‚ö†Ô∏è  –†–ï–ñ–ò–ú –ü–†–û–°–ú–û–¢–†–ê - –∏–∑–º–µ–Ω–µ–Ω–∏—è –Ω–µ –±—É–¥—É—Ç —Å–æ—Ö—Ä–∞–Ω–µ–Ω—ã'))

        # –°—Ç—Ä–æ–∏–º –∑–∞–ø—Ä–æ—Å –¥–ª—è —Å–æ–±—ã—Ç–∏–π
        events_query = SKUDEvent.objects.all()
        
        if not force_process:
            events_query = events_query.filter(is_processed=False)
        
        if from_date:
            events_query = events_query.filter(event_time__date__gte=from_date)
        
        if to_date:
            events_query = events_query.filter(event_time__date__lte=to_date)
        
        if options['employee_id']:
            try:
                employee = Employee.objects.get(id=options['employee_id'])
                events_query = events_query.filter(employee=employee)
                self.stdout.write(f'üë§ –û–±—Ä–∞–±–æ—Ç–∫–∞ —Å–æ–±—ã—Ç–∏–π –¥–ª—è: {employee.full_name}')
            except Employee.DoesNotExist:
                raise CommandError(f'–°–æ—Ç—Ä—É–¥–Ω–∏–∫ —Å ID {options["employee_id"]} –Ω–µ –Ω–∞–π–¥–µ–Ω')
        
        if options['device_id']:
            events_query = events_query.filter(device_id=options['device_id'])

        total_events = events_query.count()
        
        if total_events == 0:
            self.stdout.write(self.style.WARNING('‚ö†Ô∏è  –ù–µ—Ç —Å–æ–±—ã—Ç–∏–π –¥–ª—è –æ–±—Ä–∞–±–æ—Ç–∫–∏'))
            return

        self.stdout.write(f'üìä –ù–∞–π–¥–µ–Ω–æ —Å–æ–±—ã—Ç–∏–π –¥–ª—è –æ–±—Ä–∞–±–æ—Ç–∫–∏: {total_events}')

        # –°–æ–∑–¥–∞—ë–º –ø—Ä–æ—Ü–µ—Å—Å–æ—Ä
        processor = WorkTimeProcessor()

        # –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞
        stats = {
            'processed_events': 0,
            'processed_employees': 0,
            'processed_days': 0,
            'created_sessions': 0,
            'created_summaries': 0,
            'errors': 0,
            'skipped': 0
        }

        # –ì—Ä—É–ø–ø–∏—Ä—É–µ–º —Å–æ–±—ã—Ç–∏—è –ø–æ —Å–æ—Ç—Ä—É–¥–Ω–∏–∫–∞–º –∏ –¥–∞—Ç–∞–º
        events_by_employee_date = defaultdict(list)
        
        self.stdout.write('üìã –ì—Ä—É–ø–ø–∏—Ä–æ–≤–∫–∞ —Å–æ–±—ã—Ç–∏–π...')
        
        for event in events_query.select_related('employee').iterator(chunk_size=batch_size):
            if event.employee is None:
                self.stdout.write(f'‚ö†Ô∏è  –°–æ–±—ã—Ç–∏–µ {event.id} –±–µ–∑ —Å–æ—Ç—Ä—É–¥–Ω–∏–∫–∞, –ø—Ä–æ–ø—É—Å–∫–∞–µ–º')
                continue
                
            event_date = event.event_time.date()
            key = (event.employee.id, event_date)
            events_by_employee_date[key].append(event)

        total_groups = len(events_by_employee_date)
        self.stdout.write(f'üìä –°–≥—Ä—É–ø–ø–∏—Ä–æ–≤–∞–Ω–æ –≤ {total_groups} –≥—Ä—É–ø–ø (—Å–æ—Ç—Ä—É–¥–Ω–∏–∫ + –¥–∞—Ç–∞)')

        # –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º –∫–∞–∂–¥—É—é –≥—Ä—É–ø–ø—É
        processed_employees = set()
        processed_days = set()
        
        try:
            for i, ((employee_id, event_date), events) in enumerate(events_by_employee_date.items(), 1):
                try:
                    employee = events[0].employee
                    
                    if self.verbosity:
                        self.stdout.write(
                            f'[{i}/{total_groups}] üë§ {employee.full_name} - üìÖ {event_date} ({len(events)} —Å–æ–±—ã—Ç–∏–π)',
                            ending=''
                        )

                    # –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º —Å–æ–±—ã—Ç–∏—è –¥–ª—è —ç—Ç–æ–≥–æ —Å–æ—Ç—Ä—É–¥–Ω–∏–∫–∞ –∏ –¥–∞—Ç—ã
                    if not dry_run:
                        with transaction.atomic():
                            success = processor.process_skud_events_for_employee(employee, event_date)
                            
                            if success:
                                # –ü–æ–º–µ—á–∞–µ–º —Å–æ–±—ã—Ç–∏—è –∫–∞–∫ –æ–±—Ä–∞–±–æ—Ç–∞–Ω–Ω—ã–µ
                                event_ids = [event.id for event in events]
                                SKUDEvent.objects.filter(id__in=event_ids).update(is_processed=True)
                    else:
                        # –í —Ä–µ–∂–∏–º–µ dry-run –ø—Ä–æ—Å—Ç–æ –∏–º–∏—Ç–∏—Ä—É–µ–º —É—Å–ø–µ—à–Ω—É—é –æ–±—Ä–∞–±–æ—Ç–∫—É
                        success = True
                    
                    if success:
                        stats['processed_events'] += len(events)
                        processed_employees.add(employee_id)
                        processed_days.add((employee_id, event_date))
                        
                        # –ü–æ–¥—Å—á–∏—Ç—ã–≤–∞–µ–º —Å–æ–∑–¥–∞–Ω–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ
                        new_sessions = WorkSession.objects.filter(
                            employee=employee, date=event_date
                        ).count()
                        
                        new_summaries = WorkDaySummary.objects.filter(
                            employee=employee, date=event_date
                        ).count()
                        
                        stats['created_sessions'] += new_sessions
                        stats['created_summaries'] += new_summaries
                        
                        if self.verbosity:
                            self.stdout.write(f' - ‚úÖ {len(events)} —Å–æ–±—ã—Ç–∏–π, {new_sessions} —Å–µ—Å—Å–∏–π, {new_summaries} —Å–≤–æ–¥–æ–∫')
                        else:
                            if i % 10 == 0 or i == total_groups:
                                self.stdout.write(f'   –û–±—Ä–∞–±–æ—Ç–∞–Ω–æ: {i}/{total_groups} –≥—Ä—É–ø–ø')
                    else:
                        stats['errors'] += 1
                        if self.verbosity:
                            self.stdout.write(f' - ‚ùå –æ—à–∏–±–∫–∞ –æ–±—Ä–∞–±–æ—Ç–∫–∏')

                except Exception as e:
                    stats['errors'] += 1
                    if self.verbosity:
                        self.stdout.write(f' - ‚ùå –æ—à–∏–±–∫–∞: {str(e)}')
                    else:
                        self.stdout.write(f'   ‚ùå –û—à–∏–±–∫–∞ –≤ –≥—Ä—É–ø–ø–µ {i}: {str(e)}')

        except KeyboardInterrupt:
            self.stdout.write(self.style.WARNING('\n‚ö†Ô∏è  –û—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–º'))
        except Exception as e:
            self.stdout.write(self.style.ERROR(f'\n‚ùå –ö—Ä–∏—Ç–∏—á–µ—Å–∫–∞—è –æ—à–∏–±–∫–∞: {str(e)}'))
            raise

        # –í—ã–≤–æ–¥–∏–º —Ñ–∏–Ω–∞–ª—å–Ω—É—é —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É
        self.stdout.write('\n' + '='*60)
        self.stdout.write(self.style.SUCCESS('üìä –ò–¢–û–ì–û–í–ê–Ø –°–¢–ê–¢–ò–°–¢–ò–ö–ê'))
        self.stdout.write('='*60)
        
        self.stdout.write(f'üìã –û–±—Ä–∞–±–æ—Ç–∞–Ω–æ —Å–æ–±—ã—Ç–∏–π: {stats["processed_events"]}/{total_events}')
        self.stdout.write(f'üë• –ó–∞—Ç—Ä–æ–Ω—É—Ç–æ —Å–æ—Ç—Ä—É–¥–Ω–∏–∫–æ–≤: {len(processed_employees)}')
        self.stdout.write(f'üìÖ –ó–∞—Ç—Ä–æ–Ω—É—Ç–æ –¥–Ω–µ–π: {len(processed_days)}')
        self.stdout.write(f'‚úÖ –°–æ–∑–¥–∞–Ω–æ —Å–µ—Å—Å–∏–π: {stats["created_sessions"]}')
        self.stdout.write(f'‚úÖ –°–æ–∑–¥–∞–Ω–æ —Å–≤–æ–¥–æ–∫: {stats["created_summaries"]}')
        self.stdout.write(f'‚ùå –û—à–∏–±–æ–∫: {stats["errors"]}')

        if stats['errors'] == 0:
            self.stdout.write(self.style.SUCCESS('\nüéâ –û–±—Ä–∞–±–æ—Ç–∫–∞ –∑–∞–≤–µ—Ä—à–µ–Ω–∞ —É—Å–ø–µ—à–Ω–æ!'))
        else:
            self.stdout.write(self.style.WARNING(f'\n‚ö†Ô∏è  –û–±—Ä–∞–±–æ—Ç–∫–∞ –∑–∞–≤–µ—Ä—à–µ–Ω–∞ —Å {stats["errors"]} –æ—à–∏–±–∫–∞–º–∏'))

        # –†–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–∏
        if stats['processed_events'] < total_events:
            self.stdout.write(f'\nüí° –°–æ–≤–µ—Ç: {total_events - stats["processed_events"]} —Å–æ–±—ã—Ç–∏–π –Ω–µ –æ–±—Ä–∞–±–æ—Ç–∞–Ω–æ')
        
        if stats['errors'] > 0:
            self.stdout.write('\nüí° –°–æ–≤–µ—Ç: –ü—Ä–æ–≤–µ—Ä—å—Ç–µ –ª–æ–≥–∏ –æ—à–∏–±–æ–∫ –¥–ª—è –∏—Å–ø—Ä–∞–≤–ª–µ–Ω–∏—è –ø—Ä–æ–±–ª–µ–º–Ω—ã—Ö –¥–∞–Ω–Ω—ã—Ö')
