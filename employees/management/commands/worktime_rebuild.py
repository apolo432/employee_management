"""
Management –∫–æ–º–∞–Ω–¥–∞ –¥–ª—è –ø–µ—Ä–µ—Å—á—ë—Ç–∞ –∏—Å—Ç–æ—Ä–∏—á–µ—Å–∫–∏—Ö –¥–∞–Ω–Ω—ã—Ö —Ä–∞–±–æ—á–µ–≥–æ –≤—Ä–µ–º–µ–Ω–∏
"""

from django.core.management.base import BaseCommand, CommandError
from django.utils import timezone
from django.db import transaction
from datetime import datetime, date, timedelta
import sys

from employees.models import Employee, SKUDEvent, WorkSession, WorkDaySummary, WorkTimeAuditLog
from employees.work_time_processor import WorkTimeProcessor


class Command(BaseCommand):
    help = '–ü–µ—Ä–µ—Å—á—ë—Ç —Ä–∞–±–æ—á–∏—Ö —Å–µ—Å—Å–∏–π –∏ —Å–≤–æ–¥–æ–∫ –¥–ª—è –∏—Å—Ç–æ—Ä–∏—á–µ—Å–∫–∏—Ö –¥–∞–Ω–Ω—ã—Ö'

    def add_arguments(self, parser):
        parser.add_argument(
            '--from-date',
            type=str,
            required=True,
            help='–ù–∞—á–∞–ª—å–Ω–∞—è –¥–∞—Ç–∞ –ø–µ—Ä–∏–æ–¥–∞ –≤ —Ñ–æ—Ä–º–∞—Ç–µ YYYY-MM-DD',
        )
        parser.add_argument(
            '--to-date',
            type=str,
            required=True,
            help='–ö–æ–Ω–µ—á–Ω–∞—è –¥–∞—Ç–∞ –ø–µ—Ä–∏–æ–¥–∞ –≤ —Ñ–æ—Ä–º–∞—Ç–µ YYYY-MM-DD',
        )
        parser.add_argument(
            '--employee-id',
            type=str,
            help='ID –∫–æ–Ω–∫—Ä–µ—Ç–Ω–æ–≥–æ —Å–æ—Ç—Ä—É–¥–Ω–∏–∫–∞ –¥–ª—è –æ–±—Ä–∞–±–æ—Ç–∫–∏',
        )
        parser.add_argument(
            '--batch-size',
            type=int,
            default=100,
            help='–†–∞–∑–º–µ—Ä –ø–∞–∫–µ—Ç–∞ –¥–ª—è –æ–±—Ä–∞–±–æ—Ç–∫–∏ (–ø–æ —É–º–æ–ª—á–∞–Ω–∏—é 100)',
        )
        parser.add_argument(
            '--force-rebuild',
            action='store_true',
            help='–ü—Ä–∏–Ω—É–¥–∏—Ç–µ–ª—å–Ω–æ–µ –ø–µ—Ä–µ—Å–æ–∑–¥–∞–Ω–∏–µ —Å—É—â–µ—Å—Ç–≤—É—é—â–∏—Ö –¥–∞–Ω–Ω—ã—Ö',
        )
        parser.add_argument(
            '--dry-run',
            action='store_true',
            help='–ü–æ–∫–∞–∑–∞—Ç—å —á—Ç–æ –±—É–¥–µ—Ç —Å–¥–µ–ª–∞–Ω–æ –±–µ–∑ –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è –∏–∑–º–µ–Ω–µ–Ω–∏–π',
        )
        parser.add_argument(
            '--verbose',
            action='store_true',
            help='–ü–æ–¥—Ä–æ–±–Ω—ã–π –≤—ã–≤–æ–¥ –ø—Ä–æ—Ü–µ—Å—Å–∞',
        )

    def handle(self, *args, **options):
        self.verbosity = options['verbose']
        
        # –ü–∞—Ä—Å–∏–º –¥–∞—Ç—ã
        try:
            from_date = datetime.strptime(options['from_date'], '%Y-%m-%d').date()
            to_date = datetime.strptime(options['to_date'], '%Y-%m-%d').date()
        except ValueError:
            raise CommandError('–ù–µ–≤–µ—Ä–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç –¥–∞—Ç—ã. –ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ YYYY-MM-DD')

        if from_date > to_date:
            raise CommandError('–ù–∞—á–∞–ª—å–Ω–∞—è –¥–∞—Ç–∞ –Ω–µ –º–æ–∂–µ—Ç –±—ã—Ç—å –ø–æ–∑–∂–µ –∫–æ–Ω–µ—á–Ω–æ–π')

        if from_date > date.today():
            raise CommandError('–ù–∞—á–∞–ª—å–Ω–∞—è –¥–∞—Ç–∞ –Ω–µ –º–æ–∂–µ—Ç –±—ã—Ç—å –≤ –±—É–¥—É—â–µ–º')

        # –ü–æ–ª—É—á–∞–µ–º —Å–æ—Ç—Ä—É–¥–Ω–∏–∫–æ–≤ –¥–ª—è –æ–±—Ä–∞–±–æ—Ç–∫–∏
        if options['employee_id']:
            try:
                employees = [Employee.objects.get(id=options['employee_id'])]
            except Employee.DoesNotExist:
                raise CommandError(f'–°–æ—Ç—Ä—É–¥–Ω–∏–∫ —Å ID {options["employee_id"]} –Ω–µ –Ω–∞–π–¥–µ–Ω')
        else:
            employees = Employee.objects.filter(is_active=True)

        if not employees:
            raise CommandError('–ù–µ—Ç –∞–∫—Ç–∏–≤–Ω—ã—Ö —Å–æ—Ç—Ä—É–¥–Ω–∏–∫–æ–≤ –¥–ª—è –æ–±—Ä–∞–±–æ—Ç–∫–∏')

        batch_size = options['batch_size']
        force_rebuild = options['force_rebuild']
        dry_run = options['dry_run']

        self.stdout.write(
            self.style.SUCCESS(
                f'üöÄ –ù–∞—á–∏–Ω–∞–µ–º –ø–µ—Ä–µ—Å—á—ë—Ç –¥–∞–Ω–Ω—ã—Ö —Å {from_date} –ø–æ {to_date}'
            )
        )
        
        if dry_run:
            self.stdout.write(self.style.WARNING('‚ö†Ô∏è  –†–ï–ñ–ò–ú –ü–†–û–°–ú–û–¢–†–ê - –∏–∑–º–µ–Ω–µ–Ω–∏—è –Ω–µ –±—É–¥—É—Ç —Å–æ—Ö—Ä–∞–Ω–µ–Ω—ã'))

        # –ü–æ–¥—Å—á–∏—Ç—ã–≤–∞–µ–º –æ–±—â–∏–π –æ–±—ä—ë–º —Ä–∞–±–æ—Ç—ã
        total_days = (to_date - from_date).days + 1
        total_employees = len(employees)
        total_operations = total_days * total_employees

        self.stdout.write(f'üìä –û–±—ä—ë–º —Ä–∞–±–æ—Ç—ã: {total_operations} –æ–ø–µ—Ä–∞—Ü–∏–π ({total_days} –¥–Ω–µ–π √ó {total_employees} —Å–æ—Ç—Ä—É–¥–Ω–∏–∫–æ–≤)')

        # –°–æ–∑–¥–∞—ë–º –ø—Ä–æ—Ü–µ—Å—Å–æ—Ä
        processor = WorkTimeProcessor()

        # –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞
        stats = {
            'processed_employees': 0,
            'processed_days': 0,
            'created_sessions': 0,
            'created_summaries': 0,
            'updated_sessions': 0,
            'updated_summaries': 0,
            'deleted_sessions': 0,
            'deleted_summaries': 0,
            'errors': 0,
            'skipped': 0
        }

        try:
            # –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º –∫–∞–∂–¥–æ–≥–æ —Å–æ—Ç—Ä—É–¥–Ω–∏–∫–∞
            for i, employee in enumerate(employees, 1):
                self.stdout.write(
                    f'\nüë§ [{i}/{total_employees}] –û–±—Ä–∞–±–æ—Ç–∫–∞: {employee.full_name} ({employee.employee_id})'
                )
                
                # –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º –∫–∞–∂–¥—ã–π –¥–µ–Ω—å
                current_date = from_date
                while current_date <= to_date:
                    try:
                        if self.verbosity:
                            self.stdout.write(f'   üìÖ {current_date}', ending='')

                        # –ü—Ä–æ–≤–µ—Ä—è–µ–º –Ω–∞–ª–∏—á–∏–µ –¥–∞–Ω–Ω—ã—Ö –¥–ª—è –ø–µ—Ä–µ—Å—á—ë—Ç–∞
                        existing_sessions = WorkSession.objects.filter(
                            employee=employee, date=current_date
                        ).count()
                        
                        existing_summaries = WorkDaySummary.objects.filter(
                            employee=employee, date=current_date
                        ).count()

                        # –ï—Å–ª–∏ –¥–∞–Ω–Ω—ã–µ —Å—É—â–µ—Å—Ç–≤—É—é—Ç –∏ –Ω–µ –ø—Ä–∏–Ω—É–¥–∏—Ç–µ–ª—å–Ω—ã–π –ø–µ—Ä–µ—Å—á—ë—Ç
                        if existing_sessions > 0 or existing_summaries > 0:
                            if not force_rebuild:
                                if self.verbosity:
                                    self.stdout.write(f' - –ø—Ä–æ–ø—É—Å–∫ (–¥–∞–Ω–Ω—ã–µ —Å—É—â–µ—Å—Ç–≤—É—é—Ç)', ending='')
                                stats['skipped'] += 1
                                current_date += timedelta(days=1)
                                continue
                            else:
                                # –£–¥–∞–ª—è–µ–º —Å—É—â–µ—Å—Ç–≤—É—é—â–∏–µ –¥–∞–Ω–Ω—ã–µ
                                if not dry_run:
                                    deleted_sessions = WorkSession.objects.filter(
                                        employee=employee, date=current_date
                                    ).delete()[0]
                                    
                                    deleted_summaries = WorkDaySummary.objects.filter(
                                        employee=employee, date=current_date
                                    ).delete()[0]
                                    
                                    stats['deleted_sessions'] += deleted_sessions
                                    stats['deleted_summaries'] += deleted_summaries

                                if self.verbosity:
                                    self.stdout.write(f' - –ø–µ—Ä–µ—Å–æ–∑–¥–∞–Ω–∏–µ', ending='')

                        # –ü—Ä–æ–≤–µ—Ä—è–µ–º –Ω–∞–ª–∏—á–∏–µ —Å–æ–±—ã—Ç–∏–π –°–ö–£–î
                        skud_events = SKUDEvent.objects.filter(
                            employee=employee,
                            event_time__date=current_date
                        ).exists()

                        if not skud_events:
                            if self.verbosity:
                                self.stdout.write(f' - –Ω–µ—Ç —Å–æ–±—ã—Ç–∏–π', ending='')
                            stats['skipped'] += 1
                            current_date += timedelta(days=1)
                            continue

                        # –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º –¥–∞–Ω–Ω—ã–µ
                        if not dry_run:
                            with transaction.atomic():
                                success = processor.process_skud_events_for_employee(
                                    employee, current_date
                                )
                                
                                if success:
                                    # –ü–æ–¥—Å—á–∏—Ç—ã–≤–∞–µ–º —Å–æ–∑–¥–∞–Ω–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ
                                    new_sessions = WorkSession.objects.filter(
                                        employee=employee, date=current_date
                                    ).count()
                                    
                                    new_summaries = WorkDaySummary.objects.filter(
                                        employee=employee, date=current_date
                                    ).count()
                                    
                                    stats['created_sessions'] += new_sessions
                                    stats['created_summaries'] += new_summaries
                                    
                                    if self.verbosity:
                                        self.stdout.write(f' - ‚úÖ —Å–æ–∑–¥–∞–Ω–æ {new_sessions} —Å–µ—Å—Å–∏–π, {new_summaries} —Å–≤–æ–¥–æ–∫', ending='')
                                else:
                                    stats['errors'] += 1
                                    if self.verbosity:
                                        self.stdout.write(f' - ‚ùå –æ—à–∏–±–∫–∞', ending='')
                        else:
                            if self.verbosity:
                                self.stdout.write(f' - –±—É–¥–µ—Ç –æ–±—Ä–∞–±–æ—Ç–∞–Ω', ending='')

                        stats['processed_days'] += 1

                    except Exception as e:
                        stats['errors'] += 1
                        if self.verbosity:
                            self.stdout.write(f' - ‚ùå –æ—à–∏–±–∫–∞: {str(e)}', ending='')
                        else:
                            self.stdout.write(f'   ‚ùå –û—à–∏–±–∫–∞ {current_date}: {str(e)}')

                    current_date += timedelta(days=1)
                    if self.verbosity:
                        self.stdout.write()  # –ù–æ–≤–∞—è —Å—Ç—Ä–æ–∫–∞

                stats['processed_employees'] += 1

        except KeyboardInterrupt:
            self.stdout.write(self.style.WARNING('\n‚ö†Ô∏è  –û—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–º'))
        except Exception as e:
            self.stdout.write(self.style.ERROR(f'\n‚ùå –ö—Ä–∏—Ç–∏—á–µ—Å–∫–∞—è –æ—à–∏–±–∫–∞: {str(e)}'))
            raise

        # –í—ã–≤–æ–¥–∏–º —Ñ–∏–Ω–∞–ª—å–Ω—É—é —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É
        self.stdout.write('\n' + '='*60)
        self.stdout.write(self.style.SUCCESS('üìä –ò–¢–û–ì–û–í–ê–Ø –°–¢–ê–¢–ò–°–¢–ò–ö–ê'))
        self.stdout.write('='*60)
        
        self.stdout.write(f'üë• –û–±—Ä–∞–±–æ—Ç–∞–Ω–æ —Å–æ—Ç—Ä—É–¥–Ω–∏–∫–æ–≤: {stats["processed_employees"]}/{total_employees}')
        self.stdout.write(f'üìÖ –û–±—Ä–∞–±–æ—Ç–∞–Ω–æ –¥–Ω–µ–π: {stats["processed_days"]}/{total_operations}')
        self.stdout.write(f'‚è≠Ô∏è  –ü—Ä–æ–ø—É—â–µ–Ω–æ: {stats["skipped"]}')
        self.stdout.write(f'‚ùå –û—à–∏–±–æ–∫: {stats["errors"]}')
        
        if not dry_run:
            self.stdout.write(f'‚úÖ –°–æ–∑–¥–∞–Ω–æ —Å–µ—Å—Å–∏–π: {stats["created_sessions"]}')
            self.stdout.write(f'‚úÖ –°–æ–∑–¥–∞–Ω–æ —Å–≤–æ–¥–æ–∫: {stats["created_summaries"]}')
            self.stdout.write(f'üóëÔ∏è  –£–¥–∞–ª–µ–Ω–æ —Å–µ—Å—Å–∏–π: {stats["deleted_sessions"]}')
            self.stdout.write(f'üóëÔ∏è  –£–¥–∞–ª–µ–Ω–æ —Å–≤–æ–¥–æ–∫: {stats["deleted_summaries"]}')

        # –°–æ–∑–¥–∞—ë–º –∑–∞–ø–∏—Å—å –∞—É–¥–∏—Ç–∞
        if not dry_run and stats['processed_days'] > 0:
            try:
                # –°–æ–∑–¥–∞—ë–º —Å–∏—Å—Ç–µ–º–Ω—É—é –∑–∞–ø–∏—Å—å –∞—É–¥–∏—Ç–∞
                audit_description = f"–ü–µ—Ä–µ—Å—á—ë—Ç –¥–∞–Ω–Ω—ã—Ö —Å {from_date} –ø–æ {to_date}. "
                audit_description += f"–û–±—Ä–∞–±–æ—Ç–∞–Ω–æ: {stats['processed_days']} –¥–Ω–µ–π, "
                audit_description += f"–°–æ–∑–¥–∞–Ω–æ: {stats['created_sessions']} —Å–µ—Å—Å–∏–π, "
                audit_description += f"{stats['created_summaries']} —Å–≤–æ–¥–æ–∫"

                WorkTimeAuditLog.objects.create(
                    employee=employees[0] if len(employees) == 1 else None,
                    date=from_date,
                    action='reprocess_day',
                    description=audit_description,
                    reason='Management –∫–æ–º–∞–Ω–¥–∞ worktime_rebuild',
                    changed_by=None  # –°–∏—Å—Ç–µ–º–Ω–∞—è –æ–ø–µ—Ä–∞—Ü–∏—è
                )
                
                self.stdout.write(self.style.SUCCESS('üìù –°–æ–∑–¥–∞–Ω–∞ –∑–∞–ø–∏—Å—å –∞—É–¥–∏—Ç–∞'))
            except Exception as e:
                self.stdout.write(self.style.WARNING(f'‚ö†Ô∏è  –ù–µ —É–¥–∞–ª–æ—Å—å —Å–æ–∑–¥–∞—Ç—å –∑–∞–ø–∏—Å—å –∞—É–¥–∏—Ç–∞: {e}'))

        if stats['errors'] == 0:
            self.stdout.write(self.style.SUCCESS('\nüéâ –ü–µ—Ä–µ—Å—á—ë—Ç –∑–∞–≤–µ—Ä—à—ë–Ω —É—Å–ø–µ—à–Ω–æ!'))
        else:
            self.stdout.write(self.style.WARNING(f'\n‚ö†Ô∏è  –ü–µ—Ä–µ—Å—á—ë—Ç –∑–∞–≤–µ—Ä—à—ë–Ω —Å {stats["errors"]} –æ—à–∏–±–∫–∞–º–∏'))

        # –†–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–∏
        if stats['skipped'] > 0:
            self.stdout.write('\nüí° –°–æ–≤–µ—Ç: –ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ --force-rebuild –¥–ª—è –ø–µ—Ä–µ—Å—á—ë—Ç–∞ —Å—É—â–µ—Å—Ç–≤—É—é—â–∏—Ö –¥–∞–Ω–Ω—ã—Ö')
        
        if stats['errors'] > 0:
            self.stdout.write('\nüí° –°–æ–≤–µ—Ç: –ü—Ä–æ–≤–µ—Ä—å—Ç–µ –ª–æ–≥–∏ –æ—à–∏–±–æ–∫ –∏ –∏—Å–ø—Ä–∞–≤—å—Ç–µ –ø—Ä–æ–±–ª–µ–º–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ')
