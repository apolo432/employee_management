"""
Django settings for employee_management project.

Generated by 'django-admin startproject' using Django 5.0.3.

For more information on this file, see
https://docs.djangoproject.com/en/5.0/topics/settings/

For the full list of settings and their values, see
https://docs.djangoproject.com/en/5.0/ref/settings/
"""

from pathlib import Path

# Build paths inside the project like this: BASE_DIR / 'subdir'.
BASE_DIR = Path(__file__).resolve().parent.parent


# Quick-start development settings - unsuitable for production
# See https://docs.djangoproject.com/en/5.0/howto/deployment/checklist/

# SECURITY WARNING: keep the secret key used in production secret!
SECRET_KEY = 'django-insecure-#%acwu8n@ckfdd1j2$^!=w6@u&bcxna@%ii(nrgk@c+-k3c!r7'

# SECURITY WARNING: don't run with debug turned on in production!
DEBUG = True

ALLOWED_HOSTS = []


# Application definition

INSTALLED_APPS = [
    'django.contrib.admin',
    'django.contrib.auth',
    'django.contrib.contenttypes',
    'django.contrib.sessions',
    'django.contrib.messages',
    'django.contrib.staticfiles',
    'rest_framework',
    'employees',
]

MIDDLEWARE = [
    'django.middleware.security.SecurityMiddleware',
    'django.contrib.sessions.middleware.SessionMiddleware',
    'django.middleware.common.CommonMiddleware',
    'django.middleware.csrf.CsrfViewMiddleware',
    'django.contrib.auth.middleware.AuthenticationMiddleware',
    'django.contrib.messages.middleware.MessageMiddleware',
    'django.middleware.clickjacking.XFrameOptionsMiddleware',
    # Middleware для системы ролей и прав доступа
    'employees.middleware.RoleBasedAccessMiddleware',
    'employees.middleware.AccessLoggingMiddleware',
    'employees.middleware.SessionTimeoutMiddleware',
    'employees.middleware.RoleContextMiddleware',
]

ROOT_URLCONF = 'employee_management.urls'

TEMPLATES = [
    {
        'BACKEND': 'django.template.backends.django.DjangoTemplates',
        'DIRS': [],
        'APP_DIRS': True,
        'OPTIONS': {
            'context_processors': [
                'django.template.context_processors.debug',
                'django.template.context_processors.request',
                'django.contrib.auth.context_processors.auth',
                'django.contrib.messages.context_processors.messages',
            ],
        },
    },
]

WSGI_APPLICATION = 'employee_management.wsgi.application'


# Database
# https://docs.djangoproject.com/en/5.0/ref/settings/#databases

DATABASES = {
    'default': {
        'ENGINE': 'django.db.backends.sqlite3',
        'NAME': BASE_DIR / 'db.sqlite3',
    }
}


# Password validation
# https://docs.djangoproject.com/en/5.0/ref/settings/#auth-password-validators

AUTH_PASSWORD_VALIDATORS = [
    {
        'NAME': 'django.contrib.auth.password_validation.UserAttributeSimilarityValidator',
    },
    {
        'NAME': 'django.contrib.auth.password_validation.MinimumLengthValidator',
    },
    {
        'NAME': 'django.contrib.auth.password_validation.CommonPasswordValidator',
    },
    {
        'NAME': 'django.contrib.auth.password_validation.NumericPasswordValidator',
    },
]


# Internationalization
# https://docs.djangoproject.com/en/5.0/topics/i18n/

LANGUAGE_CODE = 'ru-ru'

TIME_ZONE = 'Europe/Moscow'

USE_I18N = True

USE_TZ = True


# Static files (CSS, JavaScript, Images)
# https://docs.djangoproject.com/en/5.0/howto/static-files/

STATIC_URL = 'static/'
STATIC_ROOT = BASE_DIR / 'staticfiles'

# Media files
MEDIA_URL = '/media/'
MEDIA_ROOT = BASE_DIR / 'media'

# Default primary key field type
# https://docs.djangoproject.com/en/5.0/ref/settings/#default-auto-field

DEFAULT_AUTO_FIELD = 'django.db.models.BigAutoField'

# =============================================================================
# НАСТРОЙКИ СИСТЕМЫ РОЛЕЙ И ПРАВ ДОСТУПА
# =============================================================================

# Настройки безопасности
SECURITY_SETTINGS = {
    'SESSION_TIMEOUT_HOURS': 8,  # Время бездействия сессии в часах
    'MAX_LOGIN_ATTEMPTS': 5,     # Максимальное количество попыток входа
    'LOCKOUT_DURATION_MINUTES': 15,  # Время блокировки в минутах
    'REQUIRE_2FA': False,        # Требовать двухфакторную аутентификацию
    'PASSWORD_COMPLEXITY': True, # Требовать сложные пароли
    'AUDIT_LOG_RETENTION_DAYS': 365,  # Хранение логов аудита в днях
}

# Настройки логирования доступа
ACCESS_LOG_SETTINGS = {
    'LOG_ALL_REQUESTS': False,   # Логировать все запросы
    'LOG_PROTECTED_ONLY': True,  # Логировать только защищенные страницы
    'LOG_ANONYMOUS': False,      # Логировать анонимных пользователей
    'LOG_GET_REQUESTS': False,   # Логировать GET запросы
    'LOG_POST_REQUESTS': True,   # Логировать POST запросы
    'LOG_API_REQUESTS': True,    # Логировать API запросы
}

# Настройки ролей по умолчанию
DEFAULT_ROLE_SETTINGS = {
    'AUTO_ASSIGN_EMPLOYEE_ROLE': True,  # Автоматически назначать роль "Сотрудник"
    'AUTO_ASSIGN_SUPERUSER_ROLE': True, # Автоматически назначать роль "Супер-администратор"
    'DEFAULT_EMPLOYEE_ROLE_SCOPE': 'employee',  # Область действия роли сотрудника
    'DEFAULT_MANAGER_ROLE_SCOPE': 'department', # Область действия роли руководителя
}

# Настройки временных прав
TEMPORARY_PERMISSION_SETTINGS = {
    'MAX_DURATION_DAYS': 30,     # Максимальная длительность временного права в днях
    'AUTO_EXPIRE': True,         # Автоматически истекать временные права
    'NOTIFY_BEFORE_EXPIRE_DAYS': 3,  # Уведомлять за N дней до истечения
}

# Настройки уведомлений
NOTIFICATION_SETTINGS = {
    'EMAIL_NOTIFICATIONS': False,    # Email уведомления
    'BROWSER_NOTIFICATIONS': True,   # Уведомления в браузере
    'LOG_NOTIFICATIONS': True,       # Логировать уведомления
}

# Django REST Framework settings
REST_FRAMEWORK = {
    'DEFAULT_AUTHENTICATION_CLASSES': [
        'rest_framework.authentication.SessionAuthentication',
        'rest_framework.authentication.TokenAuthentication',
    ],
    'DEFAULT_PERMISSION_CLASSES': [
        'rest_framework.permissions.IsAuthenticated',
    ],
    'DEFAULT_PAGINATION_CLASS': 'rest_framework.pagination.PageNumberPagination',
    'PAGE_SIZE': 20,
    'DEFAULT_FILTER_BACKENDS': [
        'django_filters.rest_framework.DjangoFilterBackend',
        'rest_framework.filters.SearchFilter',
        'rest_framework.filters.OrderingFilter',
    ],
}
